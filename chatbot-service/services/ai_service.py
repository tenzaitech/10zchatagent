"""
AI service - OpenRouter AI and intent classification
Independent AI-related functions
"""
import httpx
from config import OPENROUTER_API_KEY, FALLBACK_MESSAGE

async def get_ai_response(message: str, user_id: str = "") -> str:
    """Get AI response from Claude 3.5 Sonnet with fallback"""
    
    # Check if API key is available and valid
    if not OPENROUTER_API_KEY or "invalid" in OPENROUTER_API_KEY.lower():
        print("‚ö†Ô∏è OpenRouter API key not valid, using smart fallback")
        return _get_smart_fallback(message)
    
    # Try Claude 3.5 Sonnet first
    try:
        response = await _call_claude_sonnet(message)
        if response:
            return response
    except Exception as e:
        print(f"‚ùå Claude Sonnet failed: {e}")
        if "401" in str(e) or "User not found" in str(e):
            print("‚ö†Ô∏è API key appears invalid, switching to smart fallback")
            return _get_smart_fallback(message)
    
    # Fallback to Mistral Free
    try:
        response = await _call_mistral_free(message)
        if response:
            return response
    except Exception as e:
        print(f"‚ùå Mistral fallback failed: {e}")
        if "401" in str(e):
            print("‚ö†Ô∏è API access issues, using smart fallback")
            return _get_smart_fallback(message)
    
    # Final fallback
    return _get_smart_fallback(message)

def _get_smart_fallback(message: str) -> str:
    """Intelligent fallback when AI is unavailable"""
    text = message.lower()
    
    # Smart pattern matching for common queries
    if any(word in text for word in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello", "hi", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ"]):
        return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Tenzai Sushi üç£ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"
    
    elif any(word in text for word in ["‡πÄ‡∏ß‡∏•‡∏≤", "‡πÄ‡∏õ‡∏¥‡∏î", "‡∏õ‡∏¥‡∏î", "‡πÇ‡∏°‡∏á", "‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á"]):
        return "üïô ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 10:00-21:00 ‡∏ô. ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 20:30 ‡∏ô.‡∏Ñ‡πà‡∏∞"
    
    elif any(word in text for word in ["‡πÄ‡∏°‡∏ô‡∏π", "‡∏£‡∏≤‡∏Ñ‡∏≤", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏î‡∏π"]):
        return "üçú ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡πà‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢"
    
    elif any(word in text for word in ["‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", "address", "‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"]):
        return "üìç 123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô ‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏Ñ‡πà‡∏∞"
    
    elif any(word in text for word in ["‡∏ä‡∏≥‡∏£‡∏∞", "‡∏à‡πà‡∏≤‡∏¢", "‡πÇ‡∏≠‡∏ô", "‡πÄ‡∏á‡∏¥‡∏ô"]):
        return "üí≥ ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞: ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î/‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô/‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏Ñ‡πà‡∏∞ ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ô‡∏∞‡∏Ñ‡∏∞"
    
    elif any(word in text for word in ["‡∏™‡∏±‡πà‡∏á", "order", "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"]):
        return "üõí ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' ‡πÄ‡∏•‡∏¢"
    
    else:
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á üîß ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä"

async def _call_claude_sonnet(message: str) -> str:
    """Call Claude 3.5 Sonnet (primary AI)"""
    if not OPENROUTER_API_KEY:
        raise Exception("OpenRouter API key not available")
        
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://order.tenzaitech.online",
        "X-Title": "Tenzai Sushi Chatbot"
    }
    
    # Enhanced system prompt for Claude 4 Sonnet
    system_prompt = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πâ‡∏≤‡∏ô Tenzai Sushi ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏£‡πâ‡∏≤‡∏ô:
- ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏î‡πà‡∏ô: ‡∏ã‡∏π‡∏ä‡∏¥ ‡∏ã‡∏≤‡∏ä‡∏¥‡∏°‡∏¥ ‡∏£‡∏≤‡πÄ‡∏°‡∏ô ‡∏õ‡∏•‡∏≤‡πÑ‡∏´‡∏•‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
- ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î: 10:00-21:00 ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 20:30
- ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏î ‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤

‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏≠‡∏ö:
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô 1-2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏†‡∏≤‡∏©‡∏≤‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏∞
- ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô
- ‡∏™‡πà‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π"""

    payload = {
        "model": "anthropic/claude-sonnet-4",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": message}
        ],
        "max_tokens": 800,
        "temperature": 0.3
    }
    
    print(f"ü§ñ Claude Sonnet: {message[:50]}...")
    
    async with httpx.AsyncClient(timeout=5.0) as client:
        response = await client.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload
        )
        
    if response.status_code == 200:
        data = response.json()
        ai_response = data["choices"][0]["message"]["content"].strip()
        print(f"‚úÖ Claude response: {ai_response[:50]}...")
        return ai_response
    elif response.status_code == 429:
        raise Exception(f"Rate limit (429)")
    else:
        raise Exception(f"HTTP {response.status_code}: {response.text}")

async def _call_mistral_free(message: str) -> str:
    """Fallback to Mistral Free model"""
    if not OPENROUTER_API_KEY:
        return FALLBACK_MESSAGE
        
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://order.tenzaitech.online",
        "X-Title": "Tenzai Sushi Chatbot"
    }
    
    system_prompt = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πâ‡∏≤‡∏ô Tenzai Sushi - ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î 10:00-21:00"""

    payload = {
        "model": "mistralai/mistral-7b-instruct:free",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": message}
        ],
        "max_tokens": 80,
        "temperature": 0.5
    }
    
    print(f"üîÑ Mistral fallback: {message[:30]}...")
    
    async with httpx.AsyncClient(timeout=10.0) as client:
        response = await client.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload
        )
        
    if response.status_code == 200:
        data = response.json()
        ai_response = data["choices"][0]["message"]["content"].strip()
        print(f"‚úÖ Mistral response: {ai_response[:30]}...")
        return ai_response
    else:
        raise Exception(f"HTTP {response.status_code}")

def classify_intent(message_text: str) -> str:
    """Smart intent classification - FAQ vs AI vs Order"""
    text = message_text.lower()
    
    # FAQ patterns (high confidence)
    if any(word in text for word in ["‡πÄ‡∏ß‡∏•‡∏≤", "‡πÄ‡∏õ‡∏¥‡∏î", "‡∏õ‡∏¥‡∏î", "‡πÇ‡∏°‡∏á", "hours", "‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á"]):
        return "hours"
    elif any(word in text for word in ["‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", "‡πÅ‡∏≠‡∏î‡πÄ‡∏î‡∏£‡∏™", "location", "address", "‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô", "‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô"]):
        return "location"
    elif any(word in text for word in ["‡∏£‡∏≤‡∏Ñ‡∏≤", "‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£", "price", "cost", "‡∏Å‡∏µ‡πà‡∏ö‡∏≤‡∏ó"]):
        return "menu"
    elif any(word in text for word in ["‡∏ä‡∏≥‡∏£‡∏∞", "‡∏à‡πà‡∏≤‡∏¢", "payment", "pay", "‡πÇ‡∏≠‡∏ô", "‡πÄ‡∏á‡∏¥‡∏ô"]):
        return "payment"
    elif any(word in text for word in ["‡∏™‡∏±‡πà‡∏á", "order", "‡πÇ‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"]):
        return "order"
    
    # Complex questions for AI (check before menu to catch food questions)
    if any(char in text for char in ["?", "‡πÑ‡∏´‡∏°", "‡∏°‡∏±‡πâ‡∏¢", "‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°", "‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", "‡∏ó‡∏≥‡πÑ‡∏°"]) and len(text) >= 8:
        return "ai_complex"
    
    # Check for restaurant/food context
    restaurant_keywords = ["‡πÄ‡∏°‡∏ô‡∏π", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "food", "menu", "sushi", "‡∏ã‡∏π‡∏ä‡∏¥", "‡∏Ç‡πâ‡∏≤‡∏ß", "‡∏ô‡πâ‡∏≥", "‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô", "‡∏ó‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏Å‡∏¥‡∏ô"]
    if any(word in text for word in restaurant_keywords):
        return "menu"
    
    # Simple greeting
    if any(word in text for word in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello", "hi", "‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡πà‡∏∞", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ"]):
        return "greeting"
    
    # Default to AI for everything else
    return "ai_fallback"