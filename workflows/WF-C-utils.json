{
  "name": "WF-C: Utility Functions (Health Check + Auto-cancel)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "health/chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "1a2b3c4d-5e6f-7890-abcd-ef1234567890",
      "name": "Health Check - Chat",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        200
      ]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "health/orders",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "2b3c4d5e-6f7g-8901-bcde-f23456789012",
      "name": "Health Check - Orders",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Chat Health Check\nconst healthData = {\n  service: 'chat',\n  status: 'healthy',\n  timestamp: new Date().toISOString(),\n  checks: {\n    webhook_endpoint: '✅ Active',\n    faq_responses: '✅ 5 categories loaded',\n    order_button: '✅ LIFF URL configured',\n    signature_validation: '✅ Enabled'\n  },\n  endpoints: {\n    line_webhook: '/webhook/line-chat',\n    test_webhook: '/webhook-test/chat'\n  },\n  uptime_seconds: Math.floor(process.uptime?.() || 0),\n  version: 'v2.0'\n};\n\nreturn [{ json: healthData }];"
      },
      "id": "3c4d5e6f-7g8h-9012-cdef-345678901234",
      "name": "Generate Chat Health",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Orders Health Check with Supabase connectivity test\nconst healthData = {\n  service: 'orders',\n  status: 'healthy',\n  timestamp: new Date().toISOString(),\n  checks: {\n    webhook_endpoint: '✅ Active',\n    price_validation: '✅ Re-calculation enabled',\n    database_write: '✅ Service role configured',\n    staff_notification: '✅ Template ready'\n  },\n  endpoints: {\n    create_order: '/webhook/orders/create',\n    test_order: '/webhook-test/order'\n  },\n  database: {\n    url: 'qlhpmrehrmprptldtchb.supabase.co',\n    tables: ['customers', 'orders', 'order_items'],\n    connection: 'pending_test'\n  },\n  uptime_seconds: Math.floor(process.uptime?.() || 0),\n  version: 'v2.0'\n};\n\nreturn [{ json: healthData }];"
      },
      "id": "4d5e6f7g-8h9i-0123-def1-456789012345",
      "name": "Generate Orders Health",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        400
      ]
    },
    {
      "parameters": {
        "url": "https://qlhpmrehrmprptldtchb.supabase.co/rest/v1/categories",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaHBtcmVocm1wcnB0bGR0Y2hiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQzMzcwNDIsImV4cCI6MjA2OTkxMzA0Mn0.SnTR2caXeCiQY_de6PEk1Dc0TVS9fP1s9qym_WbE114"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaHBtcmVocm1wcnB0bGR0Y2hiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQzMzcwNDIsImV4cCI6MjA2OTkxMzA0Mn0.SnTR2caXeCiQY_de6PEk1Dc0TVS9fP1s9qym_WbE114"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "select",
              "value": "count"
            }
          ]
        },
        "options": {}
      },
      "id": "5e6f7g8h-9i0j-1234-ef12-567890123456",
      "name": "Test DB Connection",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Update health with DB test results\nconst healthData = $('Generate Orders Health').first().json;\nconst dbResult = $input.first();\n\ntry {\n  // Check if DB test was successful\n  if (dbResult.json && Array.isArray(dbResult.json)) {\n    healthData.database.connection = '✅ Connected';\n    healthData.database.categories_count = dbResult.json.length || 'N/A';\n    healthData.status = 'healthy';\n  } else {\n    throw new Error('Invalid DB response');\n  }\n} catch (error) {\n  healthData.database.connection = '❌ Failed: ' + error.message;\n  healthData.status = 'degraded';\n  healthData.checks.database_write = '⚠️ Connection issue';\n}\n\nreturn [{ json: healthData }];"
      },
      "id": "6f7g8h9i-0j1k-2345-fg23-678901234567",
      "name": "Update Orders Health with DB Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "responseHeaders": {
          "entries": [
            {
              "name": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "7g8h9i0j-1k2l-3456-gh34-789012345678",
      "name": "Chat Health Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        680,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "responseHeaders": {
          "entries": [
            {
              "name": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "8h9i0j1k-2l3m-4567-hi45-890123456789",
      "name": "Orders Health Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "*/30 * * * *"
            }
          ]
        }
      },
      "id": "9i0j1k2l-3m4n-5678-ij56-901234567890",
      "name": "Auto-cancel Timer (30min)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1.1,
      "position": [
        240,
        700
      ]
    },
    {
      "parameters": {
        "url": "https://qlhpmrehrmprptldtchb.supabase.co/rest/v1/orders",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaHBtcmVocm1wcnB0bGR0Y2hiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDMzNzA0MiwiZXhwIjoyMDY5OTEzMDQyfQ.foCnBLUA6SOXHPBKuBJaKu2A1CPUeetMTjXWSbBkObU"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaHBtcmVocm1wcnB0bGR0Y2hiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDMzNzA0MiwiZXhwIjoyMDY5OTEzMDQyfQ.foCnBLUA6SOXHPBKuBJaKu2A1CPUeetMTjXWSbBkObU"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "select",
              "value": "id,customer_id,status,created_at"
            },
            {
              "name": "status",
              "value": "eq.pending"
            },
            {
              "name": "created_at",
              "value": "lt.{{ $now.minus({minutes: 30}).toISO() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0j1k2l3m-4n5o-6789-jk67-012345678901",
      "name": "Find Expired Orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "// Check if there are orders to cancel\nconst expiredOrders = $input.first().json;\n\nif (!Array.isArray(expiredOrders) || expiredOrders.length === 0) {\n  return [{\n    json: {\n      action: 'no_action',\n      message: 'No expired orders found',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nconsole.log(`Found ${expiredOrders.length} expired orders:`, expiredOrders.map(o => o.id));\n\nreturn [{\n  json: {\n    action: 'cancel_orders',\n    expired_orders: expiredOrders,\n    count: expiredOrders.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "1k2l3m4n-5o6p-7890-kl78-123456789012",
      "name": "Check for Expired Orders",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-expired-orders",
              "leftValue": "={{ $json.action }}",
              "rightValue": "cancel_orders",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2l3m4n5o-6p7q-8901-lm89-234567890123",
      "name": "Has Expired Orders?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        900,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare bulk update for expired orders\nconst expiredOrders = $json.expired_orders;\nconst orderIds = expiredOrders.map(order => order.id);\n\n// Create filter for PATCH request\nconst filter = `id=in.(${orderIds.join(',')})`;\n\nreturn [{\n  json: {\n    filter: filter,\n    orderIds: orderIds,\n    updateData: {\n      status: 'cancelled',\n      updated_at: new Date().toISOString()\n    },\n    count: orderIds.length\n  }\n}];"
      },
      "id": "3m4n5o6p-7q8r-9012-mn90-345678901234",
      "name": "Prepare Bulk Cancel",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        600
      ]
    },
    {
      "parameters": {
        "url": "https://qlhpmrehrmprptldtchb.supabase.co/rest/v1/orders",
        "method": "PATCH",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaHBtcmVocm1wcnB0bGR0Y2hiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDMzNzA0MiwiZXhwIjoyMDY5OTEzMDQyfQ.foCnBLUA6SOXHPBKuBJaKu2A1CPUeetMTjXWSbBkObU"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaHBtcmVocm1wcnB0bGR0Y2hiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDMzNzA0MiwiZXhwIjoyMDY5OTEzMDQyfQ.foCnBLUA6SOXHPBKuBJaKu2A1CPUeetMTjXWSbBkObU"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter",
              "value": "={{ $json.filter }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "body": "={{ JSON.stringify($json.updateData) }}",
        "options": {}
      },
      "id": "4n5o6p7q-8r9s-0123-no01-456789012345",
      "name": "Cancel Expired Orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log the auto-cancel results\nconst cancelResult = $('Prepare Bulk Cancel').first().json;\nconst updateResult = $input.first();\n\nconst logData = {\n  action: 'auto_cancel_completed',\n  cancelled_orders: cancelResult.orderIds,\n  count: cancelResult.count,\n  timestamp: new Date().toISOString(),\n  success: updateResult.status === 204 || updateResult.status === 200\n};\n\nconsole.log('Auto-cancel completed:', logData);\n\n// Future: Send notification to admin about cancelled orders\n// Future: Log to external monitoring system\n\nreturn [{ json: logData }];"
      },
      "id": "5o6p7q8r-9s0t-1234-op12-567890123456",
      "name": "Log Auto-cancel Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        600
      ]
    }
  ],
  "connections": {
    "Health Check - Chat": {
      "main": [
        [
          {
            "node": "Generate Chat Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Health Check - Orders": {
      "main": [
        [
          {
            "node": "Generate Orders Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Chat Health": {
      "main": [
        [
          {
            "node": "Chat Health Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Orders Health": {
      "main": [
        [
          {
            "node": "Test DB Connection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test DB Connection": {
      "main": [
        [
          {
            "node": "Update Orders Health with DB Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Orders Health with DB Status": {
      "main": [
        [
          {
            "node": "Orders Health Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-cancel Timer (30min)": {
      "main": [
        [
          {
            "node": "Find Expired Orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Expired Orders": {
      "main": [
        [
          {
            "node": "Check for Expired Orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Expired Orders": {
      "main": [
        [
          {
            "node": "Has Expired Orders?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Expired Orders?": {
      "main": [
        [],
        [
          {
            "node": "Prepare Bulk Cancel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Bulk Cancel": {
      "main": [
        [
          {
            "node": "Cancel Expired Orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cancel Expired Orders": {
      "main": [
        [
          {
            "node": "Log Auto-cancel Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-18T12:30:00.000Z",
  "versionId": "1"
}