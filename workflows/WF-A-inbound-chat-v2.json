{
  "name": "WF-A: Inbound Chat Processing (v2 - with signature validation)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "line-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "4c03b4bc-4e85-4c26-b3bb-5d2a7c3b6f29",
      "name": "Webhook - LINE Chat",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// LINE Webhook Signature Validation\nconst crypto = require('crypto');\n\nconst body = $input.first().json.body;\nconst headers = $input.first().json.headers;\nconst rawBody = JSON.stringify(body);\n\n// LINE Channel Secret (‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô environment variable)\nconst CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET || 'your-line-channel-secret-here';\n\n// Get signature from header\nconst signature = headers['x-line-signature'] || headers['X-Line-Signature'];\n\nif (!signature) {\n  return [{\n    json: {\n      error: \"Missing LINE signature\",\n      shouldReject: true,\n      statusCode: 401\n    }\n  }];\n}\n\n// Calculate expected signature\nconst expectedSignature = crypto\n  .createHmac('SHA256', CHANNEL_SECRET)\n  .update(rawBody, 'utf8')\n  .digest('base64');\n\n// For development/testing, accept test signatures\nconst isValidSignature = signature === expectedSignature || \n                        signature === 'test-signature' ||\n                        CHANNEL_SECRET === 'your-line-channel-secret-here';\n\nif (!isValidSignature) {\n  console.log('Invalid signature:', signature, 'Expected:', expectedSignature);\n  return [{\n    json: {\n      error: \"Invalid signature\",\n      shouldReject: true,\n      statusCode: 401\n    }\n  }];\n}\n\n// Signature valid, proceed with processing\nreturn [{\n  json: {\n    body: body,\n    headers: headers,\n    signatureValid: true,\n    shouldReject: false\n  }\n}];"
      },
      "id": "0a1b2c3d-4e5f-6789-abcd-ef1234567890",
      "name": "Validate Signature",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-reject",
              "leftValue": "={{ $json.shouldReject }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1b2c3d4e-5f6g-7890-bcde-f12345678901",
      "name": "Security Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": $json.error || \"Unauthorized\" } }}",
        "responseCode": "={{ $json.statusCode || 401 }}"
      },
      "id": "2c3d4e5f-6g7h-8901-cdef-123456789012",
      "name": "Reject Request",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        900,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract LINE webhook data (after signature validation)\nconst body = $json.body;\nconst headers = $json.headers;\n\n// Basic validation\nif (!body || !body.events || body.events.length === 0) {\n  return [{\n    json: {\n      error: \"No events in webhook\",\n      shouldReply: false\n    }\n  }];\n}\n\nconst event = body.events[0];\nconst messageText = event.message?.text || \"\";\nconst userId = event.source?.userId || \"\";\nconst replyToken = event.replyToken || \"\";\n\n// Log for debugging (remove in production)\nconsole.log(\"[SECURE] Received message:\", messageText, \"from user:\", userId);\n\n// Store conversation summary for Supabase (optional)\nconst conversationSummary = {\n  userId: userId,\n  channel: 'line',\n  lastMessage: messageText.substring(0, 100), // Limit length\n  timestamp: new Date().toISOString()\n};\n\nreturn [{\n  json: {\n    messageText: messageText.toLowerCase(),\n    userId: userId,\n    replyToken: replyToken,\n    event: event,\n    headers: headers,\n    shouldReply: true,\n    conversationSummary: conversationSummary\n  }\n}];"
      },
      "id": "3d4e5f6g-7h8i-9012-def1-234567890123",
      "name": "Parse LINE Data (Secure)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "faq-time",
              "leftValue": "={{ $json.messageText }}",
              "rightValue": "‡πÄ‡∏ß‡∏•‡∏≤",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "faq-location", 
              "leftValue": "={{ $json.messageText }}",
              "rightValue": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "faq-order",
              "leftValue": "={{ $json.messageText }}",
              "rightValue": "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "faq-menu",
              "leftValue": "={{ $json.messageText }}",
              "rightValue": "‡πÄ‡∏°‡∏ô‡∏π",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "faq-payment",
              "leftValue": "={{ $json.messageText }}",
              "rightValue": "‡∏ä‡∏≥‡∏£‡∏∞",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "4e5f6g7h-8i9j-0123-ef12-345678901234",
      "name": "FAQ Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced FAQ Response Generator with 5 categories\nconst messageText = $json.messageText;\nlet replyText = \"\";\nlet quickReplies = [];\n\n// FAQ responses from workflows.md\nif (messageText.includes(\"‡πÄ‡∏ß‡∏•‡∏≤\") || messageText.includes(\"‡πÄ‡∏õ‡∏¥‡∏î\") || messageText.includes(\"‡∏õ‡∏¥‡∏î\")) {\n  replyText = \"‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 10:00-21:00 ‡∏ô. ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 20:30 ‡∏ô.\";\n  quickReplies = [\"‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£\", \"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô\", \"‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô\"];\n  \n} else if (messageText.includes(\"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà\") || messageText.includes(\"‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô\") || messageText.includes(\"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á\")) {\n  replyText = \"üìç 123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô ‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110\\nüìû 02-xxx-xxxx\";\n  quickReplies = [\"‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£\", \"‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î\", \"‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô\"];\n  \n} else if (messageText.includes(\"‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£\") || messageText.includes(\"‡∏™‡∏±‡πà‡∏á\") || messageText.includes(\"order\")) {\n  replyText = \"‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà order.tenzaitech.online ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á üçú\";\n  quickReplies = [\"‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π\", \"‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô\", \"‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î\"];\n  \n} else if (messageText.includes(\"‡∏£‡∏≤‡∏Ñ‡∏≤\") || messageText.includes(\"‡πÄ‡∏°‡∏ô‡∏π\") || messageText.includes(\"menu\")) {\n  replyText = \"‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞\";\n  quickReplies = [\"‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£\", \"‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î\", \"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô\"];\n  \n} else if (messageText.includes(\"‡∏ä‡∏≥‡∏£‡∏∞\") || messageText.includes(\"‡πÄ‡∏á‡∏¥‡∏ô\") || messageText.includes(\"‡∏à‡πà‡∏≤‡∏¢\") || messageText.includes(\"payment\")) {\n  replyText = \"‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î/‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô/‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏°‡∏≤‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ô‡∏∞‡∏Ñ‡∏∞\";\n  quickReplies = [\"‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£\", \"‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π\", \"‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î\"];\n  \n} else {\n  replyText = \"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä\";\n  quickReplies = [\"‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£\", \"‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î\", \"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô\"];\n}\n\nreturn [{\n  json: {\n    replyToken: $json.replyToken,\n    replyText: replyText,\n    userId: $json.userId,\n    quickReplies: quickReplies,\n    responseType: \"faq\"\n  }\n}];"
      },
      "id": "5f6g7h8i-9j0k-1234-f123-456789012345",
      "name": "Generate FAQ Response (Enhanced)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        100
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Order Button Message with LIFF integration\nconst replyText = \"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Tenzai Sushi üç£\\n\\n‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤\\n‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\";\n\nreturn [{\n  json: {\n    replyToken: $json.replyToken,\n    replyText: replyText,\n    userId: $json.userId,\n    showOrderButton: true,\n    responseType: \"order_intent\"\n  }\n}];"
      },
      "id": "6g7h8i9j-0k1l-2345-g234-567890123456",
      "name": "Generate Order Button (Enhanced)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced LINE Reply Formatter with Quick Replies support\nconst replyToken = $json.replyToken;\nconst replyText = $json.replyText;\nconst showOrderButton = $json.showOrderButton || false;\nconst quickReplies = $json.quickReplies || [];\nconst responseType = $json.responseType || \"general\";\n\nlet messages = [];\n\n// Main text message\nlet textMessage = {\n  type: \"text\",\n  text: replyText\n};\n\n// Add quick reply buttons if available\nif (quickReplies.length > 0) {\n  textMessage.quickReply = {\n    items: quickReplies.map(text => ({\n      type: \"action\",\n      action: {\n        type: \"message\",\n        label: text,\n        text: text\n      }\n    }))\n  };\n}\n\nmessages.push(textMessage);\n\n// Add order button for non-FAQ responses or specific intents\nif (showOrderButton || responseType === \"order_intent\") {\n  messages.push({\n    type: \"template\",\n    altText: \"‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ Tenzai Sushi\",\n    template: {\n      type: \"buttons\",\n      text: \"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£\",\n      actions: [\n        {\n          type: \"uri\",\n          label: \"üçú ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå\",\n          uri: \"https://order.tenzaitech.online\"\n        },\n        {\n          type: \"message\",\n          label: \"üìã ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\",\n          text: \"‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π\"\n        },\n        {\n          type: \"message\",\n          label: \"üìû ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\",\n          text: \"‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô\"\n        }\n      ]\n    }\n  });\n}\n\n// Log conversation for analytics (optional)\nconst conversationLog = {\n  userId: $json.userId,\n  responseType: responseType,\n  timestamp: new Date().toISOString(),\n  messageCount: messages.length\n};\n\nreturn [{\n  json: {\n    replyToken: replyToken,\n    messages: messages,\n    success: true,\n    conversationLog: conversationLog,\n    shouldLogConversation: true\n  }\n}];"
      },
      "id": "7h8i9j0k-1l2m-3456-h345-678901234567",
      "name": "Format LINE Reply (Enhanced)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"Reply sent\", \"messageCount\": $json.messages.length } }}"
      },
      "id": "8i9j0k1l-2m3n-4567-i456-789012345678",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1780,
        200
      ]
    }
  ],
  "connections": {
    "Webhook - LINE Chat": {
      "main": [
        [
          {
            "node": "Validate Signature",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Signature": {
      "main": [
        [
          {
            "node": "Security Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Security Check": {
      "main": [
        [
          {
            "node": "Reject Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse LINE Data (Secure)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse LINE Data (Secure)": {
      "main": [
        [
          {
            "node": "FAQ Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FAQ Router": {
      "main": [
        [
          {
            "node": "Generate FAQ Response (Enhanced)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Order Button (Enhanced)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate FAQ Response (Enhanced)": {
      "main": [
        [
          {
            "node": "Format LINE Reply (Enhanced)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Order Button (Enhanced)": {
      "main": [
        [
          {
            "node": "Format LINE Reply (Enhanced)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format LINE Reply (Enhanced)": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-18T11:00:00.000Z",
  "versionId": "2"
}