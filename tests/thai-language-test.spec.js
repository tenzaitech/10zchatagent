// @ts-check
const { test, expect } = require('@playwright/test');

test.describe('Thai Language Support Test', () => {
  
  test('test Thai text reading and interaction', async ({ page }) => {
    console.log('üáπüá≠ Testing Thai language support in Playwright...');
    
    // Enable Thai text logging
    page.on('console', msg => {
      console.log(`üñ•Ô∏è [Thai Console]: ${msg.text()}`);
    });
    
    await page.goto('/customer_webapp.html');
    await page.waitForTimeout(2000);
    
    // Test reading Thai text elements
    const headerText = await page.locator('.header h1').textContent();
    console.log(`üìã Header text (Thai): "${headerText}"`);
    
    const subtitle = await page.locator('.header p').textContent();
    console.log(`üìù Subtitle text (Thai): "${subtitle}"`);
    
    // Configure database to load Thai menu
    const configPanel = page.locator('#configPanel');
    if (await configPanel.isVisible() || !(await page.locator('#mainContent').isVisible())) {
      console.log('üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
      
      if (!(await configPanel.isVisible())) {
        await page.locator('.config-toggle').click();
        await page.waitForTimeout(500);
      }
      
      await page.fill('#supabaseUrl', 'https://qlhpmrehrmprptldtchb.supabase.co');
      await page.fill('#serviceKey', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaHBtcmVocm1wcnB0bGR0Y2hiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDMzNzA0MiwiZXhwIjoyMDY5OTEzMDQyfQ.foCnBLUA6SOXHPBKuBJaKu2A1CPUeetMTjXWSbBkObU');
      
      await page.locator('button:has-text("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")').click();
      console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" ‡πÅ‡∏•‡πâ‡∏ß');
      await page.waitForTimeout(3000);
    }
    
    // Wait for Thai menu to load
    await page.waitForSelector('.menu-card', { timeout: 10000 });
    console.log('‚úÖ ‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
    
    // Read Thai menu items
    const menuCards = page.locator('.menu-card');
    const menuCount = await menuCards.count();
    console.log(`üç£ ‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${menuCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // Read first 3 Thai menu items
    for (let i = 0; i < Math.min(3, menuCount); i++) {
      const menuCard = menuCards.nth(i);
      
      const menuName = await menuCard.locator('.menu-name').textContent();
      const menuNameThai = await menuCard.locator('.menu-name-thai').textContent();
      const menuPrice = await menuCard.locator('.menu-price').textContent();
      
      console.log(`üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà ${i + 1}:`);
      console.log(`   ‡∏ä‡∏∑‡πà‡∏≠ (EN): "${menuName}"`);
      console.log(`   ‡∏ä‡∏∑‡πà‡∏≠ (TH): "${menuNameThai}"`);
      console.log(`   ‡∏£‡∏≤‡∏Ñ‡∏≤: "${menuPrice}"`);
    }
    
    // Test Thai category names
    const categoryItems = page.locator('.category-item');
    const categoryCount = await categoryItems.count();
    console.log(`üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°ÿØ: ${categoryCount} ‡∏´‡∏°‡∏ß‡∏î`);
    
    for (let i = 0; i < Math.min(5, categoryCount); i++) {
      const categoryName = await categoryItems.nth(i).textContent();
      console.log(`   ‡∏´‡∏°‡∏ß‡∏î ${i + 1}: "${categoryName}"`);
    }
    
    // Test Thai button text and interactions
    const addButtons = page.locator('.add-to-cart');
    if (await addButtons.first().isVisible()) {
      const buttonText = await addButtons.first().textContent();
      console.log(`üõí ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: "${buttonText}"`);
    }
    
    // Check cart toggle button
    const cartToggle = page.locator('.cart-toggle');
    if (await cartToggle.isVisible()) {
      console.log('üõí ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
    }
    
    // Test searching in Thai
    const searchInput = page.locator('#searchInput');
    if (await searchInput.isVisible()) {
      const placeholder = await searchInput.getAttribute('placeholder');
      console.log(`üîç ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ placeholder: "${placeholder}"`);
      
      // Test Thai search
      await searchInput.fill('‡∏ã‡∏π‡∏ä‡∏¥');
      console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ã‡∏π‡∏ä‡∏¥"');
      await page.waitForTimeout(1000);
      
      // Clear search
      await searchInput.fill('');
      await page.waitForTimeout(500);
    }
    
    // Take screenshot with Thai content
    await page.screenshot({ 
      path: 'tests/screenshots/thai-content.png', 
      fullPage: true 
    });
    console.log('üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢');
    
    // Test reading status messages
    const statusElements = page.locator('.status-indicator span');
    const statusCount = await statusElements.count();
    
    for (let i = 0; i < statusCount; i++) {
      const statusText = await statusElements.nth(i).textContent();
      if (statusText && statusText.trim()) {
        console.log(`üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: "${statusText}"`);
      }
    }
    
    console.log('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  });
  
  test('test Thai number and currency formatting', async ({ page }) => {
    console.log('üí∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏ó‡∏¢...');
    
    await page.goto('/customer_webapp.html');
    
    // Test Thai date/time formatting
    const now = new Date();
    const thaiDate = now.toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      timeZone: 'Asia/Bangkok'
    });
    
    const thaiTime = now.toLocaleTimeString('th-TH', {
      timeZone: 'Asia/Bangkok'
    });
    
    console.log(`üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: ${thaiDate}`);
    console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: ${thaiTime}`);
    
    // Test Thai number formatting
    const testNumbers = [15, 119, 289, 1250];
    
    testNumbers.forEach(num => {
      const thaiNumber = num.toLocaleString('th-TH');
      const thaiBaht = num.toLocaleString('th-TH', {
        style: 'currency',
        currency: 'THB'
      });
      
      console.log(`üí∞ ${num} ‚Üí "${thaiNumber}" ‚Üí "${thaiBaht}"`);
    });
    
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  });
  
  test('test Thai text input and forms', async ({ page }) => {
    console.log('üìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢...');
    
    // Handle Thai dialogs/prompts
    page.on('dialog', async dialog => {
      const message = dialog.message();
      console.log(`üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡∏≠‡∏∞‡∏•‡πá‡∏≠‡∏Å: "${message}"`);
      
      if (message.includes('‡∏ä‡∏∑‡πà‡∏≠')) {
        await dialog.accept('‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢');
        console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"');
      } else if (message.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå')) {
        await dialog.accept('081-234-5678');
        console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: "081-234-5678"');
      } else {
        await dialog.accept('‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏á');
        console.log('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: "‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏á"');
      }
    });
    
    await page.goto('/customer_webapp.html');
    await page.waitForTimeout(2000);
    
    console.log('üé≠ Playwright ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!');
    console.log('üìã ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:');
    console.log('   ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢');  
    console.log('   ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ dialogs ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢');
    console.log('   ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢');
    console.log('   ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏ó‡∏¢');
    console.log('   ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ó‡∏¢');
  });
});